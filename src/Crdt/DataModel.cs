using System.Text.Json;
using Crdt.Changes;
using Crdt.Core;
using Crdt.Db;
using Crdt.Entities;
using Crdt.Resource;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Options;

namespace Crdt;

public record SyncResults(Commit[] MissingFromLocal, Commit[] MissingFromRemote, bool IsSynced);

public class DataModel : ISyncable
{
    /// <summary>
    /// after adding any commit validate the commit history, not great for performance but good for testing.
    /// </summary>
    private readonly bool _autoValidate = true;

    private readonly CrdtRepository _crdtRepository;
    private readonly JsonSerializerOptions _serializerOptions;
    private readonly IHybridDateTimeProvider _timeProvider;
    private readonly IOptions<CrdtConfig> _crdtConfig;

    //constructor must be internal because CrdtRepository is internal
    internal DataModel(CrdtRepository crdtRepository, JsonSerializerOptions serializerOptions, IHybridDateTimeProvider timeProvider,
        IOptions<CrdtConfig> crdtConfig)
    {
        _crdtRepository = crdtRepository;
        _serializerOptions = serializerOptions;
        _timeProvider = timeProvider;
        _crdtConfig = crdtConfig;
    }


    /// <summary>
    /// add a change to the model, snapshots will be updated
    /// </summary>
    /// <param name="clientId">
    /// Unique identifier for the client, used to determine what changes need to be synced, for a single install it should always author commits with the same client id
    /// if the client id changes too much it could slow down the sync process
    /// </param>
    /// <param name="change">change to be applied to the model</param>
    /// <param name="commitId">
    /// can be used by the application code to ensure a specific change is only applied once,
    /// for example a one time migration or update of pre seeded data in the model, a hard coded guid could be used
    /// which will ensure it's only applied once to the model, even if multiple clients update at the same time and all apply the same change.
    /// typical changes should not specify the commitId and let a new guid to be generated for each commit.
    /// This could also be useful if the application has a flaky connection with the DataModel and needs to retry the same change multiple times but ensure it's only applied once,
    /// then the guid would be generated by the application
    /// </param>
    /// <param name="commitMetadata">used to store metadata on the commit, for example app version or author id</param>
    /// <returns>the newly created commit</returns>
    public async Task<Commit> AddChange(
        Guid clientId,
        IChange change,
        Guid commitId = default,
        CommitMetadata? commitMetadata = null)
    {
        return await AddChanges(clientId, [change], commitId, commitMetadata);
    }

    /// <inheritdoc cref="AddChange"/>
    public async Task<Commit> AddChanges(
        Guid clientId,
        IEnumerable<IChange> changes,
        Guid commitId = default,
        CommitMetadata? commitMetadata = null)
    {
        commitId = commitId == default ? Guid.NewGuid() : commitId;
        var commit = new Commit(commitId)
        {
            ClientId = clientId,
            HybridDateTime = _timeProvider.GetDateTime(),
            ChangeEntities = [..changes.Select(ToChangeEntity)],
            Metadata = commitMetadata ?? new()
        };
        await Add(commit);
        return commit;
    }

    private async Task Add(Commit commit)
    {
        if (await _crdtRepository.HasCommit(commit.Id)) return;
        await using var transaction = _crdtRepository.IsInTransaction ? null : await _crdtRepository.BeginTransactionAsync();
        await _crdtRepository.AddCommit(commit);
        await UpdateSnapshots(commit, [commit]);
        if (_autoValidate) await ValidateCommits();
    }

    private static ChangeEntity<IChange> ToChangeEntity(IChange change, int index)
    {
        return new ChangeEntity<IChange>()
        {
            Change = change, CommitId = change.CommitId, EntityId = change.EntityId, Index = index
        };
    }

    async Task ISyncable.AddRangeFromSync(IEnumerable<Commit> commits)
    {
        commits = commits.ToArray();
        _timeProvider.TakeLatestTime(commits.Select(c => c.HybridDateTime));
        var (oldestChange, newCommits) = await _crdtRepository.FilterExistingCommits(commits.ToArray());
        //no changes added
        if (oldestChange is null || newCommits is []) return;

        await using var transaction = await _crdtRepository.BeginTransactionAsync();
        //don't save since UpdateSnapshots will also modify newCommits with hashes, so changes will be saved once that's done
        await _crdtRepository.AddCommits(newCommits, false);
        await UpdateSnapshots(oldestChange, newCommits);
        await ValidateCommits();
        await transaction.CommitAsync();
    }

    ValueTask<bool> ISyncable.ShouldSync()
    {
        return ValueTask.FromResult(true);
    }

    private async Task UpdateSnapshots(Commit oldestAddedCommit, Commit[] newCommits)
    {
        await _crdtRepository.DeleteStaleSnapshots(oldestAddedCommit);
        var modelSnapshot = await GetProjectSnapshot(true);
        var snapshotWorker = new SnapshotWorker(modelSnapshot.Snapshots, _crdtRepository);
        await snapshotWorker.UpdateSnapshots(oldestAddedCommit, newCommits);
    }

    private async Task ValidateCommits()
    {
        Commit? parentCommit = null;
        await foreach (var commit in _crdtRepository.CurrentCommits().AsAsyncEnumerable())
        {
            var parentHash = parentCommit?.Hash ?? CommitBase.NullParentHash;
            var expectedHash = commit.GenerateHash(parentHash);
            if (commit.Hash == expectedHash && commit.ParentHash == parentHash)
            {
                parentCommit = commit;
                continue;
            }

            var actualParentCommit = await _crdtRepository.FindCommitByHash(commit.ParentHash);

            throw new CommitValidationException(
                $"Commit {commit} does not match expected hash, parent hash [{commit.ParentHash}] !== [{parentHash}], expected parent {parentCommit} and actual parent {actualParentCommit}");
        }
    }

    public async Task<ObjectSnapshot?> GetEntitySnapshotAtTime(DateTimeOffset time, Guid entityId)
    {
        var snapshots = await GetSnapshotsAt(time);
        return snapshots.GetValueOrDefault(entityId);
    }

    public async Task<ObjectSnapshot> GetLatestSnapshotByObjectId(Guid entityId)
    {
        return await _crdtRepository.GetCurrentSnapshotByObjectId(entityId);
    }

    public async Task<T?> GetLatest<T>(Guid objectId) where T : class, IObjectBase
    {
        return await _crdtRepository.GetCurrent<T>(objectId);
    }

    public async Task<ModelSnapshot> GetProjectSnapshot(bool includeDeleted = false)
    {
        return new ModelSnapshot(await GetEntitySnapshots(includeDeleted));
    }

    public IQueryable<T> GetLatestObjects<T>() where T : class, IObjectBase
    {
        var q = _crdtRepository.GetCurrentObjects<T>();
        if (q is IQueryable<IOrderableCrdt>)
        {
            q = q.OrderBy(o => EF.Property<double>(o, nameof(IOrderableCrdt.Order))).ThenBy(o => o.Id);
        }
        return q;
    }

    public async Task<IObjectBase> GetBySnapshotId(Guid snapshotId)
    {
        return await _crdtRepository.GetObjectBySnapshotId(snapshotId);
    }

    private async Task<SimpleSnapshot[]> GetEntitySnapshots(bool includeDeleted = false)
    {
        var queryable = _crdtRepository.CurrentSnapshots();
        if (!includeDeleted) queryable = queryable.Where(s => !s.EntityIsDeleted);
        var snapshots = await queryable.Select(s =>
            new SimpleSnapshot(s.Id,
                s.TypeName,
                s.EntityId,
                s.CommitId,
                s.IsRoot,
                s.Commit.HybridDateTime,
                s.Commit.Hash,
                s.EntityIsDeleted)).AsNoTracking().ToArrayAsync();
        return snapshots;
    }

    public async Task<Dictionary<Guid, ObjectSnapshot>> GetSnapshotsAt(DateTimeOffset dateTime)
    {
        var repository = _crdtRepository.GetScopedRepository(dateTime);
        var (snapshots, pendingCommits) = await repository.GetCurrentSnapshotsAndPendingCommits();

        if (pendingCommits.Length != 0)
        {
            snapshots = await SnapshotWorker.ApplyCommitsToSnapshots(snapshots, repository, pendingCommits);
        }

        return snapshots;
    }

    public async Task<SyncState> GetSyncState()
    {
        return await _crdtRepository.GetCurrentSyncState();
    }

    public async Task<ChangesResult<Commit>> GetChanges(SyncState remoteState)
    {
        return await _crdtRepository.GetChanges(remoteState);
    }

    public async Task<SyncResults> SyncWith(ISyncable remoteModel)
    {
        return await SyncHelper.SyncWith(this, remoteModel, _serializerOptions);
    }

    public async Task SyncMany(ISyncable[] remotes)
    {
        await SyncHelper.SyncMany(this, remotes, _serializerOptions);
    }

    private void ValidateResourcesSetup()
    {
        if (!_crdtConfig.Value.RemoteResourcesEnabled) throw new RemoteResourceNotEnabledException();
    }

    public async Task<Guid> AddLocalResource(string resourcePath, Guid clientId, Guid id = default, IResourceService? resourceService = null)
    {
        ValidateResourcesSetup();
        var localResource = new LocalResource
        {
            Id = id == default ? Guid.NewGuid() : id,
            LocalPath = Path.GetFullPath(resourcePath)
        };
        if (!localResource.FileExists()) throw new FileNotFoundException(localResource.LocalPath);
        await using var transaction = await _crdtRepository.BeginTransactionAsync();
        await _crdtRepository.AddLocalResource(localResource);
        if (resourceService is not null)
        {
            var uploadResult = await resourceService.UploadResource(localResource.LocalPath);
            await AddChange(clientId, new CreateRemoteResourceChange(localResource.Id, uploadResult.RemoteId));
        }
        else
        {
            await AddChange(clientId, new CreateRemoteResourcePendingUploadChange(localResource.Id));
        }
        await transaction.CommitAsync();
        return localResource.Id;
    }

    public async Task<LocalResource[]> ListResourcesPendingUpload()
    {
        ValidateResourcesSetup();
        var remoteResources = await GetLatestObjects<RemoteResource>().Where(r => r.RemoteId == null).ToArrayAsync();
        var localResource = _crdtRepository.LocalResourcesByIds(remoteResources.Select(r => r.Id));
        return await localResource.ToArrayAsync();
    }

    public async Task UploadPendingResources(Guid clientId, IResourceService resourceService)
    {
        ValidateResourcesSetup();
        var pendingUploads = await ListResourcesPendingUpload();
        var changes = new List<IChange>(pendingUploads.Length);
        try
        {
            foreach (var localResource in pendingUploads)
            {
                var uploadResult = await resourceService.UploadResource(localResource.LocalPath);
                changes.Add(new RemoteResourceUploadedChange(localResource.Id, uploadResult.RemoteId));
            }
        }
        finally
        {
            //if upload throws at any point we will at least save the changes that did get made.
            await AddChanges(clientId, changes);
        }
    }

    public async Task UploadPendingResource(Guid resourceId, Guid clientId, IResourceService resourceService)
    {
        var localResource = await _crdtRepository.GetLocalResource(resourceId) ??
                            throw new ArgumentException($"unable to find local resource with id {resourceId}");
        ValidateResourcesSetup();
        await UploadPendingResource(localResource, clientId, resourceService);
    }

    public async Task UploadPendingResource(LocalResource localResource, Guid clientId, IResourceService resourceService)
    {
        ValidateResourcesSetup();
        var uploadResult = await resourceService.UploadResource(localResource.LocalPath);
        await AddChange(clientId, new RemoteResourceUploadedChange(localResource.Id, uploadResult.RemoteId));
    }

    public async Task<RemoteResource[]> ListResourcesPendingDownload()
    {
        ValidateResourcesSetup();
        var localResourceIds = _crdtRepository.LocalResourceIds();
        var remoteResources = await GetLatestObjects<RemoteResource>()
            .Where(r => r.RemoteId != null && !localResourceIds.Contains(r.Id))
            .ToArrayAsync();
        return remoteResources;
    }

    public async Task<LocalResource> DownloadResource(Guid resourceId, IResourceService resourceService)
    {
        ValidateResourcesSetup();
        return await DownloadResource(await GetLatest<RemoteResource>(resourceId) ?? throw new EntityNotFoundException("Unable to find remote resource"), resourceService);
    }

    public async Task<LocalResource> DownloadResource(RemoteResource remoteResource, IResourceService resourceService)
    {
        ValidateResourcesSetup();
        ArgumentNullException.ThrowIfNull(remoteResource.RemoteId);
        var downloadResult = await resourceService.DownloadResource(remoteResource.RemoteId, _crdtConfig.Value.LocalResourceCachePath);
        var localResource = new LocalResource
        {
            Id = remoteResource.Id,
            LocalPath = downloadResult.LocalPath
        };
        await _crdtRepository.AddLocalResource(localResource);
        return localResource;
    }

    public async Task<LocalResource?> GetLocalResource(Guid resourceId)
    {
        return await _crdtRepository.GetLocalResource(resourceId);
    }
}
